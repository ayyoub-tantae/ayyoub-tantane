import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

// URL de base du serveur
const String baseUrl = 'http://localhost:3000';

// Classe repr√©sentant un produit
class Product {
  final String name;
  final double price;
  int? id;

  Product({required this.name, required this.price, this.id});

  Map<String, dynamic> toJson() => {
        'name': name,
        'price': price,
        if (id != null) 'id': id,
      };

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      name: json['name'],
      price: json['price'] is int ? json['price'].toDouble() : json['price'],
      id: json['id'],
    );
  }

  @override
  String toString() {
    return 'Produit #$id: $name - ${price.toStringAsFixed(2)}‚Ç¨';
  }
}

// Classe repr√©sentant une commande
class Order {
  final String product;
  final int quantity;
  int? id;
  String? date;

  Order({required this.product, required this.quantity, this.id, this.date});

  Map<String, dynamic> toJson() => {
        'product': product,
        'quantity': quantity,
        if (id != null) 'id': id,
        if (date != null) 'date': date,
      };

  factory Order.fromJson(Map<String, dynamic> json) {
    return Order(
      product: json['product'],
      quantity: json['quantity'],
      id: json['id'],
      date: json['date'],
    );
  }

  @override
  String toString() {
    return 'Commande #$id: $quantity x $product (${date != null ? date!.substring(0, 10) : "Non dat√©"})';
  }
}

// Fonction pour r√©cup√©rer tous les produits
Future<List<Product>> getProducts() async {
  try {
    print('üì• R√©cup√©ration des produits...');
    final response = await http.get(Uri.parse('$baseUrl/products'));

    if (response.statusCode == 200) {
      List<dynamic> jsonList = jsonDecode(response.body);
      List<Product> products =
          jsonList.map((json) => Product.fromJson(json)).toList();

      print('‚úÖ ${products.length} produit(s) r√©cup√©r√©(s)');
      return products;
    } else {
      print(
          '‚ùå Erreur lors de la r√©cup√©ration des produits: ${response.statusCode}');
      print('   R√©ponse: ${response.body}');
      return [];
    }
  } catch (e) {
    print('‚ùå Exception: $e');
    return [];
  }
}

// Fonction pour ajouter un nouveau produit
Future<bool> addProduct(Product product) async {
  try {
    print('üì§ Ajout du produit: ${product.name}...');
    final response = await http.post(
      Uri.parse('$baseUrl/products'),
      headers: {HttpHeaders.contentTypeHeader: 'application/json'},
      body: jsonEncode(product.toJson()),
    );

    if (response.statusCode == 201) {
      print('‚úÖ Produit ajout√© avec succ√®s');
      return true;
    } else {
      print('‚ùå Erreur lors de l\'ajout du produit: ${response.statusCode}');
      print('   R√©ponse: ${response.body}');
      return false;
    }
  } catch (e) {
    print('‚ùå Exception: $e');
    return false;
  }
}

// Fonction pour r√©cup√©rer toutes les commandes
Future<List<Order>> getOrders() async {
  try {
    print('üì• R√©cup√©ration des commandes...');
    final response = await http.get(Uri.parse('$baseUrl/orders'));

    if (response.statusCode == 200) {
      List<dynamic> jsonList = jsonDecode(response.body);
      List<Order> orders =
          jsonList.map((json) => Order.fromJson(json)).toList();

      print('‚úÖ ${orders.length} commande(s) r√©cup√©r√©e(s)');
      return orders;
    } else {
      print(
          '‚ùå Erreur lors de la r√©cup√©ration des commandes: ${response.statusCode}');
      print('   R√©ponse: ${response.body}');
      return [];
    }
  } catch (e) {
    print('‚ùå Exception: $e');
    return [];
  }
}

// Fonction pour ajouter une nouvelle commande
Future<bool> addOrder(Order order) async {
  try {
    print('üì§ Ajout de la commande: ${order.quantity}x ${order.product}...');
    final response = await http.post(
      Uri.parse('$baseUrl/orders'),
      headers: {HttpHeaders.contentTypeHeader: 'application/json'},
      body: jsonEncode(order.toJson()),
    );

    if (response.statusCode == 201) {
      print('‚úÖ Commande cr√©√©e avec succ√®s');
      return true;
    } else {
      print(
          '‚ùå Erreur lors de la cr√©ation de la commande: ${response.statusCode}');
      print('   R√©ponse: ${response.body}');
      return false;
    }
  } catch (e) {
    print('‚ùå Exception: $e');
    return false;
  }
}

// Fonction pour afficher une liste d'√©l√©ments
void printItems<T>(List<T> items, String type) {
  if (items.isEmpty) {
    print('   Aucun $type disponible');
  } else {
    for (var item in items) {
      print('   - $item');
    }
  }
  print('');
}

// Fonction principale pour tester toutes les fonctionnalit√©s
void main() async {
  print('\nüöÄ D√âMARRAGE DES TESTS DE L\'API CLIENT DART üöÄ\n');

  // 1. R√©cup√©rer et afficher tous les produits (devrait √™tre vide au d√©but)
  print('\nüìä TEST #1: R√âCUP√âRATION DES PRODUITS INITIAUX');
  var products = await getProducts();
  printItems(products, 'produit');

  // 2. Ajouter des nouveaux produits
  print('üìä TEST #2: AJOUT DE NOUVEAUX PRODUITS');
  await addProduct(Product(name: 'Laptop', price: 999.99));
  await addProduct(Product(name: 'Smartphone', price: 499.50));
  await addProduct(Product(name: '√âcouteurs', price: 79.99));

  // 3. V√©rifier que les produits ont √©t√© ajout√©s
  print('\nüìä TEST #3: V√âRIFICATION DE L\'AJOUT DES PRODUITS');
  products = await getProducts();
  printItems(products, 'produit');

  // 4. R√©cup√©rer et afficher toutes les commandes (devrait √™tre vide au d√©but)
  print('üìä TEST #4: R√âCUP√âRATION DES COMMANDES INITIALES');
  var orders = await getOrders();
  printItems(orders, 'commande');

  // 5. Ajouter des nouvelles commandes
  print('üìä TEST #5: AJOUT DE NOUVELLES COMMANDES');
  await addOrder(Order(product: 'Laptop', quantity: 1));
  await addOrder(Order(product: 'Smartphone', quantity: 2));
  await addOrder(Order(product: '√âcouteurs', quantity: 3));

  // 6. V√©rifier que les commandes ont √©t√© ajout√©es
  print('\nüìä TEST #6: V√âRIFICATION DE L\'AJOUT DES COMMANDES');
  orders = await getOrders();
  printItems(orders, 'commande');

  print('üèÅ TESTS TERMIN√âS AVEC SUCC√àS! üèÅ');
}
